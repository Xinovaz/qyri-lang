WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)*) }


integer = ${ (ASCII_DIGIT | "_")+ }
float = ${ integer ~ "." ~ integer }

string = { "\"" ~ (!NEWLINE ~ !"\"" ~ ANY)* ~ "\"" }


array = { "[" ~ formal_parameters? ~ ","? ~ "]" }
array_access_terms = { expr ~ ("][" ~ expr)* }
array_access = { term_sub ~ "[" ~ array_access_terms? ~ "]" }


identifier = ${ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
typed_identifier = { identifier ~ ("<" ~ typed_identifier ~ ("," ~ typed_identifier)* ~ ">")? }
canonical_identifier = { identifier ~ ":" ~ (typed_identifier | identifier) }

term_sub = _{ float | integer | call_function | new_structure | string | array | identifier | "(" ~ expr ~ ")" }
term = { array_access | term_sub }


plus = { "+" }
minus = { "-" }
times = { "*" }
divide = { "/" }
modulus = { "%" }
arithmetic_operation = _{ plus | minus | times | divide | modulus }
arithmetic_expression = { term ~ (arithmetic_operation ~ term)+ }
negative_expression = ${ "-" ~ term }

bw_and = { "&" }
bw_or = { "|" }
bw_xor = { "^" }
bw_lshift = { "<<" }
bw_rshift = { ">>" }
bitwise_operation = _{ bw_and | bw_or | bw_xor | bw_lshift | bw_rshift }
bitwise_expression = { term ~ (bitwise_operation ~ term)+ }

log_and = { "&&" }
log_or = { "||" }
log_xor = { "^^" }
log_eq = { "==" }
log_ne = { "!=" }
log_gt = { ">" }
log_lt = { "<" }
log_ge = { ">=" }
log_le = { "<=" }
logic_operation = _{ 
	log_and 	| 
	log_or 		| 
	log_xor 	| 
	log_eq 		| 
	log_ne 		|
	log_gt		|
	log_lt		|
	log_ge		|
	log_le
}
logic_expression = { term ~ (logic_operation ~ term)+ }

not_expression = ${ "!" ~ term }

pipe_forward_operator = { "|>" }
range_operator = { ".." }
infix_operator = { "`" ~ expr ~ "`" }
functional_operator = _{ 
	pipe_forward_operator 	| 
	range_operator 			| 
	infix_operator 
}
functional_expression = { term ~ (functional_operator ~ term)+ }

assoc_operator = { "." }
assoc_all = _{ assoc_operator }
assoc_expression = { term ~ (assoc_all ~ term)+ }


structure_frame_expression = { identifier ~ "->" ~ ("{" ~ code_loud ~ "}" | expr) }


informal_parameters = { (canonical_identifier ~ ",")* ~ canonical_identifier }
closure = !{ "(" ~ informal_parameters? ~ ")" ~ ("$" ~ typed_identifier)? ~ "{" ~ code_loud ~ "}" }


formal_parameters = { expr ~ ("," ~ expr)* }
call_function = { identifier ~ "(" ~ formal_parameters? ~ ")" }
call_return = { "return" ~ expr }
call_keyword = { identifier ~ formal_parameters? }


assignment_variable = { "var" ~ (canonical_identifier | identifier) ~ "=" ~ expr }
assignment_constant = { "const" ~ (canonical_identifier | identifier) ~ "=" ~ expr }

reassignment_variable = { identifier ~ "=" ~ expr }
reassignment_variable_add = { identifier ~ "+=" ~ expr }
reassignment_variable_sub = { identifier ~ "-=" ~ expr }
reassignment_variable_mul = { identifier ~ "*=" ~ expr }
reassignment_variable_div = { identifier ~ "/=" ~ expr }


no_infix_identifier = @{ "~" ~ identifier }
declaration_function = !{ "fn" ~ (no_infix_identifier | identifier) ~ "=" ~ closure }


identifier_list = { identifier ~ ("," ~ identifier)* }
declaration_type_variables = { "#{" ~ identifier_list? ~ "}" }


attach_decorator = ${ "@" ~ identifier }


structure_fields = { "{" ~ canonical_identifier ~ ("," ~ canonical_identifier)* ~ ","? ~ "}" }
declaration_generic_structure = { "struct" ~ (canonical_identifier | identifier) }
declaration_structure = { declaration_generic_structure ~ "=" ~ structure_fields }

enumeration_variants = { "{" ~ identifier ~ ("," ~ identifier)* ~ ","? ~ "}" }
declaration_generic_enumeration = { "enum" ~ (canonical_identifier | identifier) }
declaration_enumeration = { declaration_generic_enumeration ~ "=" ~ enumeration_variants }


new_structure_fields = { "{" ~ structure_frame_expression ~ ("," ~ structure_frame_expression)* ~ ","? ~ "}" }
new_structure = { identifier ~ new_structure_fields }


if_statement = { "if" ~ expr ~ "{" ~ code_loud ~ "}" }
else_statement = { "else" ~ "{" ~ code_loud ~ "}" }
while_loop = { "while" ~ expr ~ "{" ~ code_loud ~ "}" }
for_loop = { "for" ~ expr ~ "in" ~ expr ~ "{" ~ code_loud ~ "}" }


separate_scope = { 
	if_statement					|
	else_statement					|
	while_loop						|
	for_loop						|
	declaration_function 			|
	declaration_structure 			|
	declaration_enumeration 		|
	declaration_type_variables		|
	structure_frame_expression		|
	attach_decorator
}

expr = { 
	assignment_variable 			|
	assignment_constant 			|
	reassignment_variable			|
	reassignment_variable_add		|
	reassignment_variable_sub		|
	reassignment_variable_mul		|
	reassignment_variable_div		|
	declaration_generic_structure 	|
	declaration_generic_enumeration |
	arithmetic_expression 			|
	bitwise_expression				|
	logic_expression				|
	functional_expression			|
	assoc_expression				|
	closure 						|
	not_expression					|
	negative_expression				|
	term 							
}

line = _{ expr ~ ";" }
kw_line = _{ call_keyword ~ ";" }
ret_line = _{ call_return ~ ";" }
code = _{ (separate_scope | line | ret_line | kw_line | "{" ~ code ~ "}")* }
code_loud = !{ code }

program = _{ SOI ~ code ~ EOI }