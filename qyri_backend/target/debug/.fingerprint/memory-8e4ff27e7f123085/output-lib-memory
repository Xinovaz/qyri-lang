{"message":"unused imports: `AtomType`, `Operand`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/functions.rs","byte_start":20,"byte_end":27,"line_start":1,"line_end":1,"column_start":21,"column_end":28,"is_primary":true,"text":[{"text":"use crate::typing::{Operand, AtomType};","highlight_start":21,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/functions.rs","byte_start":29,"byte_end":37,"line_start":1,"line_end":1,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"use crate::typing::{Operand, AtomType};","highlight_start":30,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/functions.rs","byte_start":0,"byte_end":39,"line_start":1,"line_end":1,"column_start":1,"column_end":40,"is_primary":true,"text":[{"text":"use crate::typing::{Operand, AtomType};","highlight_start":1,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AtomType`, `Operand`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/functions.rs:1:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse crate::typing::{Operand, AtomType};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":1198,"byte_end":1199,"line_start":63,"line_end":63,"column_start":4,"column_end":5,"is_primary":true,"text":[{"text":"\t\t\t_ => unreachable!(),","highlight_start":4,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:63:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            _ => unreachable!(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"message":"refutable pattern in local binding: `Type(_)`, `Enum(_)`, `Function(_)` and 1 more not covered","code":{"code":"E0005","explanation":"Patterns used to bind names must be irrefutable, that is, they must guarantee\nthat a name will be extracted in all cases.\n\nErroneous code example:\n\n```compile_fail,E0005\nlet x = Some(1);\nlet Some(y) = x;\n// error: refutable pattern in local binding: `None` not covered\n```\n\nIf you encounter this error you probably need to use a `match` or `if let` to\ndeal with the possibility of failure. Example:\n\n```\nlet x = Some(1);\n\nmatch x {\n    Some(y) => {\n        // do something\n    },\n    None => {}\n}\n\n// or:\n\nif let Some(y) = x {\n    // do something\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":2960,"byte_end":2986,"line_start":145,"line_end":145,"column_start":8,"column_end":34,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Struct(interior) = exc;","highlight_start":8,"highlight_end":34}],"label":"patterns `Type(_)`, `Enum(_)`, `Function(_)` and 1 more not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":419,"byte_end":673,"line_start":36,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub enum Abstract {\t\t/* In the future, all abstractions */ // I want to","highlight_start":1,"highlight_end":72},{"text":"\tType(Type),\t\t\t/* may derive from struct and enum */ // make it clear:","highlight_start":1,"highlight_end":71},{"text":"\tStruct(Vec<(Identifier, Type)>),\t\t\t\t\t\t  // \"may\"","highlight_start":1,"highlight_end":50},{"text":"\tEnum(Vec<Identifier>),","highlight_start":1,"highlight_end":24},{"text":"\tFunction(Function),","highlight_start":1,"highlight_end":21},{"text":"\tScope(Scope),","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`typing::Abstract` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the matched value is of type `typing::Abstract`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you might want to use `if let` to ignore the variant that isn't matched","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":2956,"byte_end":2993,"line_start":145,"line_end":145,"column_start":4,"column_end":41,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Struct(interior) = exc;","highlight_start":4,"highlight_end":41}],"label":null,"suggested_replacement":"if let Abstract::Struct(interior) = exc { /* */ }","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0005]\u001b[0m\u001b[0m\u001b[1m: refutable pattern in local binding: `Type(_)`, `Enum(_)`, `Function(_)` and 1 more not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:145:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Abstract {        /* In the future, all abstractions */ // I want to\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Type(Type),            /* may derive from struct and enum */ // make it clear:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Struct(Vec<(Identifier, Type)>),                          // \"may\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Enum(Vec<Identifier>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Function(Function),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Scope(Scope),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`typing::Abstract` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let Abstract::Struct(interior) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mpatterns `Type(_)`, `Enum(_)`, `Function(_)` and 1 more not covered\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the matched value is of type `typing::Abstract`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might want to use `if let` to ignore the variant that isn't matched\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if let Abstract::Struct(interior) = exc { /* */ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"refutable pattern in local binding: `Struct(_)`, `Enum(_)`, `Function(_)` and 1 more not covered","code":{"code":"E0005","explanation":"Patterns used to bind names must be irrefutable, that is, they must guarantee\nthat a name will be extracted in all cases.\n\nErroneous code example:\n\n```compile_fail,E0005\nlet x = Some(1);\nlet Some(y) = x;\n// error: refutable pattern in local binding: `None` not covered\n```\n\nIf you encounter this error you probably need to use a `match` or `if let` to\ndeal with the possibility of failure. Example:\n\n```\nlet x = Some(1);\n\nmatch x {\n    Some(y) => {\n        // do something\n    },\n    None => {}\n}\n\n// or:\n\nif let Some(y) = x {\n    // do something\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3001,"byte_end":3018,"line_start":146,"line_end":146,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Type(_) = exc;","highlight_start":8,"highlight_end":25}],"label":"patterns `Struct(_)`, `Enum(_)`, `Function(_)` and 1 more not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":419,"byte_end":673,"line_start":36,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub enum Abstract {\t\t/* In the future, all abstractions */ // I want to","highlight_start":1,"highlight_end":72},{"text":"\tType(Type),\t\t\t/* may derive from struct and enum */ // make it clear:","highlight_start":1,"highlight_end":71},{"text":"\tStruct(Vec<(Identifier, Type)>),\t\t\t\t\t\t  // \"may\"","highlight_start":1,"highlight_end":50},{"text":"\tEnum(Vec<Identifier>),","highlight_start":1,"highlight_end":24},{"text":"\tFunction(Function),","highlight_start":1,"highlight_end":21},{"text":"\tScope(Scope),","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`typing::Abstract` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the matched value is of type `typing::Abstract`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you might want to use `if let` to ignore the variant that isn't matched","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":2997,"byte_end":3025,"line_start":146,"line_end":146,"column_start":4,"column_end":32,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Type(_) = exc;","highlight_start":4,"highlight_end":32}],"label":null,"suggested_replacement":"if let Abstract::Type(_) = exc { /* */ }","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0005]\u001b[0m\u001b[0m\u001b[1m: refutable pattern in local binding: `Struct(_)`, `Enum(_)`, `Function(_)` and 1 more not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:146:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Abstract {        /* In the future, all abstractions */ // I want to\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Type(Type),            /* may derive from struct and enum */ // make it clear:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Struct(Vec<(Identifier, Type)>),                          // \"may\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Enum(Vec<Identifier>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Function(Function),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Scope(Scope),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`typing::Abstract` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let Abstract::Type(_) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mpatterns `Struct(_)`, `Enum(_)`, `Function(_)` and 1 more not covered\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the matched value is of type `typing::Abstract`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might want to use `if let` to ignore the variant that isn't matched\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if let Abstract::Type(_) = exc { /* */ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"refutable pattern in local binding: `Type(_)`, `Struct(_)`, `Function(_)` and 1 more not covered","code":{"code":"E0005","explanation":"Patterns used to bind names must be irrefutable, that is, they must guarantee\nthat a name will be extracted in all cases.\n\nErroneous code example:\n\n```compile_fail,E0005\nlet x = Some(1);\nlet Some(y) = x;\n// error: refutable pattern in local binding: `None` not covered\n```\n\nIf you encounter this error you probably need to use a `match` or `if let` to\ndeal with the possibility of failure. Example:\n\n```\nlet x = Some(1);\n\nmatch x {\n    Some(y) => {\n        // do something\n    },\n    None => {}\n}\n\n// or:\n\nif let Some(y) = x {\n    // do something\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3033,"byte_end":3050,"line_start":147,"line_end":147,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Enum(_) = exc;","highlight_start":8,"highlight_end":25}],"label":"patterns `Type(_)`, `Struct(_)`, `Function(_)` and 1 more not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":419,"byte_end":673,"line_start":36,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub enum Abstract {\t\t/* In the future, all abstractions */ // I want to","highlight_start":1,"highlight_end":72},{"text":"\tType(Type),\t\t\t/* may derive from struct and enum */ // make it clear:","highlight_start":1,"highlight_end":71},{"text":"\tStruct(Vec<(Identifier, Type)>),\t\t\t\t\t\t  // \"may\"","highlight_start":1,"highlight_end":50},{"text":"\tEnum(Vec<Identifier>),","highlight_start":1,"highlight_end":24},{"text":"\tFunction(Function),","highlight_start":1,"highlight_end":21},{"text":"\tScope(Scope),","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`typing::Abstract` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the matched value is of type `typing::Abstract`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you might want to use `if let` to ignore the variant that isn't matched","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3029,"byte_end":3057,"line_start":147,"line_end":147,"column_start":4,"column_end":32,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Enum(_) = exc;","highlight_start":4,"highlight_end":32}],"label":null,"suggested_replacement":"if let Abstract::Enum(_) = exc { /* */ }","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0005]\u001b[0m\u001b[0m\u001b[1m: refutable pattern in local binding: `Type(_)`, `Struct(_)`, `Function(_)` and 1 more not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:147:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Abstract {        /* In the future, all abstractions */ // I want to\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Type(Type),            /* may derive from struct and enum */ // make it clear:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Struct(Vec<(Identifier, Type)>),                          // \"may\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Enum(Vec<Identifier>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Function(Function),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Scope(Scope),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`typing::Abstract` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let Abstract::Enum(_) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mpatterns `Type(_)`, `Struct(_)`, `Function(_)` and 1 more not covered\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the matched value is of type `typing::Abstract`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might want to use `if let` to ignore the variant that isn't matched\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if let Abstract::Enum(_) = exc { /* */ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"refutable pattern in local binding: `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered","code":{"code":"E0005","explanation":"Patterns used to bind names must be irrefutable, that is, they must guarantee\nthat a name will be extracted in all cases.\n\nErroneous code example:\n\n```compile_fail,E0005\nlet x = Some(1);\nlet Some(y) = x;\n// error: refutable pattern in local binding: `None` not covered\n```\n\nIf you encounter this error you probably need to use a `match` or `if let` to\ndeal with the possibility of failure. Example:\n\n```\nlet x = Some(1);\n\nmatch x {\n    Some(y) => {\n        // do something\n    },\n    None => {}\n}\n\n// or:\n\nif let Some(y) = x {\n    // do something\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3065,"byte_end":3086,"line_start":148,"line_end":148,"column_start":8,"column_end":29,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Function(_) = exc;","highlight_start":8,"highlight_end":29}],"label":"patterns `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":419,"byte_end":673,"line_start":36,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub enum Abstract {\t\t/* In the future, all abstractions */ // I want to","highlight_start":1,"highlight_end":72},{"text":"\tType(Type),\t\t\t/* may derive from struct and enum */ // make it clear:","highlight_start":1,"highlight_end":71},{"text":"\tStruct(Vec<(Identifier, Type)>),\t\t\t\t\t\t  // \"may\"","highlight_start":1,"highlight_end":50},{"text":"\tEnum(Vec<Identifier>),","highlight_start":1,"highlight_end":24},{"text":"\tFunction(Function),","highlight_start":1,"highlight_end":21},{"text":"\tScope(Scope),","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`typing::Abstract` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the matched value is of type `typing::Abstract`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you might want to use `if let` to ignore the variant that isn't matched","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3061,"byte_end":3093,"line_start":148,"line_end":148,"column_start":4,"column_end":36,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Function(_) = exc;","highlight_start":4,"highlight_end":36}],"label":null,"suggested_replacement":"if let Abstract::Function(_) = exc { /* */ }","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0005]\u001b[0m\u001b[0m\u001b[1m: refutable pattern in local binding: `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:148:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Abstract {        /* In the future, all abstractions */ // I want to\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Type(Type),            /* may derive from struct and enum */ // make it clear:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Struct(Vec<(Identifier, Type)>),                          // \"may\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Enum(Vec<Identifier>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Function(Function),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Scope(Scope),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`typing::Abstract` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let Abstract::Function(_) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mpatterns `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the matched value is of type `typing::Abstract`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might want to use `if let` to ignore the variant that isn't matched\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if let Abstract::Function(_) = exc { /* */ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"refutable pattern in local binding: `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered","code":{"code":"E0005","explanation":"Patterns used to bind names must be irrefutable, that is, they must guarantee\nthat a name will be extracted in all cases.\n\nErroneous code example:\n\n```compile_fail,E0005\nlet x = Some(1);\nlet Some(y) = x;\n// error: refutable pattern in local binding: `None` not covered\n```\n\nIf you encounter this error you probably need to use a `match` or `if let` to\ndeal with the possibility of failure. Example:\n\n```\nlet x = Some(1);\n\nmatch x {\n    Some(y) => {\n        // do something\n    },\n    None => {}\n}\n\n// or:\n\nif let Some(y) = x {\n    // do something\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3101,"byte_end":3119,"line_start":149,"line_end":149,"column_start":8,"column_end":26,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Scope(_) = exc;","highlight_start":8,"highlight_end":26}],"label":"patterns `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":419,"byte_end":673,"line_start":36,"line_end":42,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub enum Abstract {\t\t/* In the future, all abstractions */ // I want to","highlight_start":1,"highlight_end":72},{"text":"\tType(Type),\t\t\t/* may derive from struct and enum */ // make it clear:","highlight_start":1,"highlight_end":71},{"text":"\tStruct(Vec<(Identifier, Type)>),\t\t\t\t\t\t  // \"may\"","highlight_start":1,"highlight_end":50},{"text":"\tEnum(Vec<Identifier>),","highlight_start":1,"highlight_end":24},{"text":"\tFunction(Function),","highlight_start":1,"highlight_end":21},{"text":"\tScope(Scope),","highlight_start":1,"highlight_end":15},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"`typing::Abstract` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the matched value is of type `typing::Abstract`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you might want to use `if let` to ignore the variant that isn't matched","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3097,"byte_end":3126,"line_start":149,"line_end":149,"column_start":4,"column_end":33,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Scope(_) = exc;","highlight_start":4,"highlight_end":33}],"label":null,"suggested_replacement":"if let Abstract::Scope(_) = exc { /* */ }","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0005]\u001b[0m\u001b[0m\u001b[1m: refutable pattern in local binding: `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:149:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Abstract {        /* In the future, all abstractions */ // I want to\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Type(Type),            /* may derive from struct and enum */ // make it clear:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Struct(Vec<(Identifier, Type)>),                          // \"may\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Enum(Vec<Identifier>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Function(Function),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Scope(Scope),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`typing::Abstract` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            let Abstract::Scope(_) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mpatterns `Type(_)`, `Struct(_)`, `Enum(_)` and 1 more not covered\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the matched value is of type `typing::Abstract`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might want to use `if let` to ignore the variant that isn't matched\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            if let Abstract::Scope(_) = exc { /* */ }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused variable: `c`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/lib.rs","byte_start":680,"byte_end":681,"line_start":33,"line_end":33,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"\tpub fn last_allocated(&self, c: Abstract) -> u32 {","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/lib.rs","byte_start":680,"byte_end":681,"line_start":33,"line_end":33,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"\tpub fn last_allocated(&self, c: Abstract) -> u32 {","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":"_c","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `c`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/lib.rs:33:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn last_allocated(&self, c: Abstract) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_c`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `exc`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":2691,"byte_end":2694,"line_start":133,"line_end":133,"column_start":4,"column_end":7,"is_primary":true,"text":[{"text":"\t\t\texc: Abstract, ","highlight_start":4,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":2691,"byte_end":2694,"line_start":133,"line_end":133,"column_start":4,"column_end":7,"is_primary":true,"text":[{"text":"\t\t\texc: Abstract, ","highlight_start":4,"highlight_end":7}],"label":null,"suggested_replacement":"_exc","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `exc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:133:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            exc: Abstract, \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_exc`\u001b[0m\n\n"}
{"message":"use of moved value: `exc`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`.  Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":2977,"byte_end":2985,"line_start":145,"line_end":145,"column_start":25,"column_end":33,"is_primary":false,"text":[{"text":"\t\t\tlet Abstract::Struct(interior) = exc;","highlight_start":25,"highlight_end":33}],"label":"value moved here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3001,"byte_end":3018,"line_start":146,"line_end":146,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Type(_) = exc;","highlight_start":8,"highlight_end":25}],"label":"value used here after partial move","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"move occurs because value has type `std::vec::Vec<(identifiers::Identifier, typing::Type)>`, which does not implement the `Copy` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"borrow this field in the pattern to avoid moving `exc.0`","code":null,"level":"help","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":2977,"byte_end":2977,"line_start":145,"line_end":145,"column_start":25,"column_end":25,"is_primary":true,"text":[{"text":"\t\t\tlet Abstract::Struct(interior) = exc;","highlight_start":25,"highlight_end":25}],"label":null,"suggested_replacement":"ref ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m: use of moved value: `exc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:146:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let Abstract::Struct(interior) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue moved here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let Abstract::Type(_) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue used here after partial move\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: move occurs because value has type `std::vec::Vec<(identifiers::Identifier, typing::Type)>`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: borrow this field in the pattern to avoid moving `exc.0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let Abstract::Struct(ref interior) = exc;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^\u001b[0m\n\n"}
{"message":"allocations are not allowed in constants","code":{"code":"E0010","explanation":"The value of statics and constants must be known at compile time, and they live\nfor the entire lifetime of a program. Creating a boxed value allocates memory on\nthe heap at runtime, and therefore cannot be done at compile time.\n\nErroneous code example:\n\n```compile_fail,E0010\n#![feature(box_syntax)]\n\nconst CON : Box<i32> = box 0;\n```\n"},"level":"error","spans":[{"file_name":"/rustc/18bf6b4f01a6feaf7259ba7cdae58031af1b7b39/library/alloc/src/macros.rs","byte_start":1352,"byte_end":1365,"line_start":45,"line_end":45,"column_start":25,"column_end":38,"is_primary":true,"text":[],"label":"allocation not allowed in constants","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3479,"byte_end":3653,"line_start":163,"line_end":172,"column_start":4,"column_end":5,"is_primary":false,"text":[{"text":"\t\t\tvec![","highlight_start":4,"highlight_end":9},{"text":"\t\t\t\t\t(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t\tIdentifier {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tname: \"message\".to_string(),","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t\t\taddress: 0xB4 as u32,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\tType::Str(\"can't divide {} by zero\".to_string()),","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/18bf6b4f01a6feaf7259ba7cdae58031af1b7b39/library/alloc/src/macros.rs","byte_start":1148,"byte_end":1375,"line_start":37,"line_end":47,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0010]\u001b[0m\u001b[0m\u001b[1m: allocations are not allowed in constants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:163:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            vec![\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    (\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Identifier {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            name: \"message\".to_string(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mallocation not allowed in constants\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3524,"byte_end":3545,"line_start":166,"line_end":166,"column_start":14,"column_end":35,"is_primary":true,"text":[{"text":"\t\t\t\t\t\t\tname: \"message\".to_string(),","highlight_start":14,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:166:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            name: \"message\".to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3602,"byte_end":3639,"line_start":170,"line_end":170,"column_start":17,"column_end":54,"is_primary":true,"text":[{"text":"\t\t\t\t\t\tType::Str(\"can't divide {} by zero\".to_string()),","highlight_start":17,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:170:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        Type::Str(\"can't divide {} by zero\".to_string()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"constant contains unimplemented expression type","code":{"code":"E0019","explanation":"A function call isn't allowed in the const's initialization expression\nbecause the expression's value must be known at compile-time.\n\nErroneous code example:\n\n```compile_fail,E0019\n#![feature(box_syntax)]\n\nfn main() {\n    struct MyOwned;\n\n    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n}\n```\n\nRemember: you can't use a function call inside a const's initialization\nexpression! However, you can totally use it anywhere else:\n\n```\nenum Test {\n    V1\n}\n\nimpl Test {\n    fn func(&self) -> i32 {\n        12\n    }\n}\n\nfn main() {\n    const FOO: Test = Test::V1;\n\n    FOO.func(); // here is good\n    let x = FOO.func(); // or even here!\n}\n```\n"},"level":"error","spans":[{"file_name":"/rustc/18bf6b4f01a6feaf7259ba7cdae58031af1b7b39/library/alloc/src/macros.rs","byte_start":1356,"byte_end":1365,"line_start":45,"line_end":45,"column_start":29,"column_end":38,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3479,"byte_end":3653,"line_start":163,"line_end":172,"column_start":4,"column_end":5,"is_primary":false,"text":[{"text":"\t\t\tvec![","highlight_start":4,"highlight_end":9},{"text":"\t\t\t\t\t(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t\tIdentifier {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tname: \"message\".to_string(),","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t\t\taddress: 0xB4 as u32,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\tType::Str(\"can't divide {} by zero\".to_string()),","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/18bf6b4f01a6feaf7259ba7cdae58031af1b7b39/library/alloc/src/macros.rs","byte_start":1148,"byte_end":1375,"line_start":37,"line_end":47,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"add `#![feature(const_mut_refs)]` to the crate attributes to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0019]\u001b[0m\u001b[0m\u001b[1m: constant contains unimplemented expression type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:163:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            vec![\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    (\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Identifier {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            name: \"message\".to_string(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: add `#![feature(const_mut_refs)]` to the crate attributes to enable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"calls in constants are limited to constant functions, tuple structs and tuple variants","code":{"code":"E0015","explanation":"A constant item was initialized with something that is not a constant\nexpression.\n\nErroneous code example:\n\n```compile_fail,E0015\nfn create_some() -> Option<u8> {\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // error!\n```\n\nThe only functions that can be called in static or constant expressions are\n`const` functions, and struct/enum constructors.\n\nTo fix this error, you can declare `create_some` as a constant function:\n\n```\nconst fn create_some() -> Option<u8> { // declared as a const function\n    Some(1)\n}\n\nconst FOO: Option<u8> = create_some(); // ok!\n\n// These are also working:\nstruct Bar {\n    x: u8,\n}\n\nconst OTHER_FOO: Option<u8> = Some(1);\nconst BAR: Bar = Bar {x: 1};\n```\n"},"level":"error","spans":[{"file_name":"/rustc/18bf6b4f01a6feaf7259ba7cdae58031af1b7b39/library/alloc/src/macros.rs","byte_start":1336,"byte_end":1366,"line_start":45,"line_end":45,"column_start":9,"column_end":39,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs","byte_start":3479,"byte_end":3653,"line_start":163,"line_end":172,"column_start":4,"column_end":5,"is_primary":false,"text":[{"text":"\t\t\tvec![","highlight_start":4,"highlight_end":9},{"text":"\t\t\t\t\t(","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t\t\tIdentifier {","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\t\t\tname: \"message\".to_string(),","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\t\t\taddress: 0xB4 as u32,","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\t},","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t\t\tType::Str(\"can't divide {} by zero\".to_string()),","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t]","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"vec!","def_site_span":{"file_name":"/rustc/18bf6b4f01a6feaf7259ba7cdae58031af1b7b39/library/alloc/src/macros.rs","byte_start":1148,"byte_end":1375,"line_start":37,"line_end":47,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0015]\u001b[0m\u001b[0m\u001b[1m: calls in constants are limited to constant functions, tuple structs and tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/xinovaz/Documents/GitHub/qyri-lang/memory/src/typing.rs:163:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            vec![\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_____________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    (\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Identifier {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            name: \"message\".to_string(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    )\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 11 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 11 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0005, E0010, E0015, E0019, E0382.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0005, E0010, E0015, E0019, E0382.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0005`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0005`.\u001b[0m\n"}
